{"version":3,"sources":["quizService/index.js","components/QuestionBox.js","components/Result.js","index.js"],"names":["qBank","question","answers","correct","questionId","n","Promise","resolve","sort","Math","random","slice","QuestionBox","options","selected","useState","answer","setAnswer","className","map","text","index","key","onClick","Result","score","playAgain","QuizBee","state","questionBank","responses","getQuestions","quizService","then","setState","computeAnswer","correctAnswer","this","length","Component","ReactDOM","render","document","getElementById"],"mappings":"iMAAMA,G,MAAQ,CACZ,CACEC,SACE,kCACFC,QAAS,CAAC,4BAA6B,6BAA8B,uBAAwB,gCAC7FC,QAAS,4BACTC,WAAY,UAEd,CACEH,SACE,mEACFC,QAAS,CAAC,WAAY,eAAgB,aAAc,SACpDC,QAAS,aACTC,WAAY,UAEd,CACEH,SACE,qBACFC,QAAS,CAAC,gBAAiB,yBAA0B,8BAA+B,wBACpFC,QAAS,8BACTC,WAAY,UAEd,CACEH,SAAU,2BACVC,QAAS,CACP,uBACA,0BACA,yBACA,0BAEFC,QAAS,yBACTC,WAAY,UAEd,CACEH,SAAU,8CACVC,QAAS,CAAC,2CAA4C,2CAA4C,4CAA6C,6CAC/IC,QAAS,4CACTC,WAAY,UAEb,CACCH,SAAU,2BACVC,QAAS,CACP,6BACA,2BACA,0BACA,6BAEFC,QAAS,4BACTC,WAAY,UAEb,CACCH,SAAU,mBACVC,QAAS,CACP,8BACA,8BACA,6BACA,iBAEFC,QAAS,6BACTC,WAAY,UAEb,CACCH,SAAU,+EACVC,QAAS,CACP,OACA,MACA,OACA,QAEFC,QAAS,MACTC,WAAY,YAKD,iBAACC,EAAD,uDAAK,EAAL,OACbC,QAAQC,QAAQP,EAAMQ,MAAK,iBAAM,GAAMC,KAAKC,YAAUC,MAAM,EAAGN,K,OC5ClDO,EAtBK,SAAC,GAAmC,IAAlCX,EAAiC,EAAjCA,SAAUY,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,SAAc,EAEvBC,mBAASF,GAFc,mBAE5CG,EAF4C,KAEpCC,EAFoC,KAGnD,OACI,yBAAKC,UAAU,eACX,yBAAKA,UAAU,YAAYjB,GAI1Be,EAAOG,KAAI,SAACC,EAAMC,GAAP,OACR,4BAAQC,IAAKD,EAAOH,UAAU,YAAYK,QAAS,WAE/CN,EAAU,CAACG,IACXN,EAASM,KAERA,QCdNI,EAPA,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,UAAT,OACX,yBAAKR,UAAU,eACX,yBAAKA,UAAU,SAAf,cAAmCO,EAAnC,uBACA,4BAAQP,UAAU,UAAUK,QAASG,GAArC,iBCEFC,E,4MAGFC,MAAQ,CACJC,aAAc,GACdJ,MAAO,EACPK,UAAW,G,EAKfC,aAAe,WACXC,IAAcC,MAAK,SAAAhC,GAEf,EAAKiC,SAAS,CACVL,aAAc5B,Q,EAM1BkC,cAAgB,SAACnB,EAAQoB,GAClBpB,IAAWoB,GACV,EAAKF,SAAS,CACVT,MAAO,EAAKG,MAAMH,MAAQ,IAGlC,EAAKS,SAAS,CACVJ,UAAW,EAAKF,MAAME,UAAY,EAAI,EAAKF,MAAME,UAAY,EAAI,K,EAGzEJ,UAAY,WACR,EAAKK,eACL,EAAKG,SAAS,CACVT,MAAO,EACPK,UAAW,K,kEAOfO,KAAKN,iB,+BAIA,IAAD,OACJ,OAEI,yBAAKb,UAAU,aACX,yBAAKA,UAAU,SAAf,aAECmB,KAAKT,MAAMC,aAAaS,OAAS,GAClCD,KAAKT,MAAME,UAAY,GACvBO,KAAKT,MAAMC,aAAaV,KACpB,gBAAElB,EAAF,EAAEA,SAAUC,EAAZ,EAAYA,QAASC,EAArB,EAAqBA,QAASC,EAA9B,EAA8BA,WAA9B,OACA,kBAAC,EAAD,CACAH,SAAUA,EACVY,QAASX,EACToB,IAAKlB,EAELU,SAAU,SAAAE,GAAM,OAAI,EAAKmB,cAAcnB,EAAQb,SAKzB,IAAzBkC,KAAKT,MAAME,UAAmB,kBAAC,EAAD,CAAQL,MAAOY,KAAKT,MAAMH,MAAOC,UAAWW,KAAKX,YAAgB,U,GAlE1Fa,aAyEtBC,IAASC,OACL,kBAAC,EAAD,MAGAC,SAASC,eAAe,U","file":"static/js/main.a203fd87.chunk.js","sourcesContent":["const qBank = [\n  {\n    question:\n      \"What is a CMS in web design?   \",\n    answers: [\"Content Management System\", \"Creative Management System\", \"Content Model System\", \"Components Management System\"],\n    correct: \"Content Management System\",\n    questionId: \"000001\"\n  },\n  {\n    question:\n      'To make your website mobile friendly, you can make your website?',\n    answers: [\"Reactive\", \"Fast Loading\", \"Responsive\", \"Light\"],\n    correct: \"Responsive\",\n    questionId: \"000002\"\n  },\n  {\n    question:\n      \"What is WordPress?\",\n    answers: [\"A text editor\", \"Text formatting system\", \"A Content Management System\", \"None of the previous\"],\n    correct: \"A Content Management System\",\n    questionId: \"000003\"\n  },\n  {\n    question: \"What does CSS stand for?\",\n    answers: [\n      \"Current Style Sheets\",\n      \"Components Style Sheets\",\n      \"Cascading Style System\",\n      \"Cascading Style Sheets\"\n    ],\n    correct: \"Cascading Style Sheets\",\n    questionId: \"000004\"\n  },\n  {\n    question: \"Which of the following statements is false?\",\n    answers: [\"You can make a website without using PHP\", \"You can make a website without using CSS\", \"You can make a website without using Java\", \"You can make a website without using HTML\"],\n    correct: \"You can make a website without using HTML\",\n    questionId: \"000005\"\n  },\n   {\n    question: \"What does SQL stand for?\",\n    answers: [\n      \"Statistical Query Language\",\n      \"Structured Questions Lot\",\n      \"Standard Query Language\",\n      \"Structured Query Language\"\n    ],\n    correct: \"Structured Query Language\",\n    questionId: \"000006\"\n  },\n   {\n    question: \"HTML stands for?\",\n    answers: [\n      \"Higher Text Markup Language\",\n      \"Hyper Text Modular Language\",\n      \"Hyper Text Markup Language\",\n      \"None of these\"\n    ],\n    correct: \"Hyper Text Markup Language\",\n    questionId: \"000007\"\n  },\n   {\n    question: \"Which of the following tag is used to mark a beginning of paragraph in HTML?\",\n    answers: [\n      \"<td>\",\n      \"<p>\",\n      \"<br>\",\n      \"<tr>\"\n    ],\n    correct: \"<p>\",\n    questionId: \"000008\"\n  },\n  \n];\n\nexport default (n = 5) =>\n  Promise.resolve(qBank.sort(() => 0.5 - Math.random()).slice(0, n));\n","// Creating the QuestionBox component\n// This renders questions text and a set of button to let the user pick an answer\n\n// The {useState} method allows to import states in a function component\nimport React, {useState} from 'react';\n\n// Using a function component instead of a class component\n// Function components do not provide a state mgmt. features\n// This is ok in components that just need to display data or have simple interactions\n// Creating a js function named QuestionBox which brings in 3 props using a single argument\nconst QuestionBox = ({question, options, selected}) => {\n    // Setting initial value of answer variable to useState(options) from props\n    const [answer, setAnswer] = useState(options);\n    return (\n        <div className=\"questionBox\"> \n            <div className=\"question\">{question}</div>\n            {/* This render a series of buttons */}\n            {/* Use map on answer variable to render a series of button */}\n            {/* Using onClick event listener property to run a function on that event*/}\n            {answer.map((text, index) => (\n                <button key={index} className=\"answerBtn\" onClick={() => {\n                    // running the setAnswer method declared using the state hook and re-write the answer state array with a new array containing the chosen answer\n                    setAnswer([text]);\n                    selected(text);\n                }}>  \n                    {text}\n                </button>\n            ))}\n        </div>\n    );\n};\n\nexport default QuestionBox;\n\n// Should you need to incorporate state in a function component, there are hooks API","import React from 'react';\n\n// Function component\n// As props, takes score and playAgain which will be a function to play again  \nconst Result = ({score, playAgain}) => (\n    <div className=\"score-board\">\n        <div className=\"score\">You scored {score}/5 correct answers </div>\n        <button className=\"playBtn\" onClick={playAgain}>Play Again!</button>\n    </div>\n);\n\nexport default Result;","import React, {Component} from 'react';\nimport ReactDOM from \"react-dom\";\nimport \"./assets/style.css\";\n\nimport quizService from \"./quizService\";\nimport QuestionBox from \"./components/QuestionBox\";\nimport Result from \"./components/Result\";\n\n// Creating root component, the class QuizBee\nclass QuizBee extends Component {\n    // Instantiate local state for the quizService component in the questionBank array\n    // This will store the questions once they are pulled in from the API\n    state = {\n        questionBank: [],\n        score: 0,\n        responses: 0\n    };\n\n    // This function invokes the quizService API\n    // and fill the questionBank array with the results\n    getQuestions = () => {\n        quizService().then(question => {\n            // Update the state variable\n            this.setState({\n                questionBank: question\n            });\n        });\n    };\n\n\n    computeAnswer = (answer, correctAnswer) => {\n        if(answer === correctAnswer){\n            this.setState({\n                score: this.state.score + 1\n            });\n        }\n        this.setState({\n            responses: this.state.responses < 5 ? this.state.responses + 1 : 5\n        })\n    };\n    playAgain = () => {\n        this.getQuestions();\n        this.setState({\n            score: 0,\n            responses: 0\n        });\n    };\n    \n    // Brings a set of questions from the API.\n    // This will populate the state variable with data\n    componentDidMount(){\n        this.getQuestions();\n    }\n\n    // Creating render method that returns the JSX template that will render on the page\n    render(){\n        return (\n            // className in JSX is like class in HTML\n            <div className=\"container\">\n                <div className='title'> QuizBee </div>\n                {/* Check whether the questionBank array has data to render */}\n                {this.state.questionBank.length > 0 && \n                this.state.responses < 5 && \n                this.state.questionBank.map(\n                    ({question, answers, correct, questionId}) => ( // render instances of the QuestionBox component, passing two props: question and options\n                    <QuestionBox // question props dynamiccaly bound to question text, options props carry an array of answers to render\n                    question={question} \n                    options={answers} \n                    key={questionId}\n                    // selected prop from QuestionBoc function run a function that gets user response and access the correct answer from API\n                    selected={answer => this.computeAnswer(answer, correct)}\n                    />  \n                    )\n                )}\n                {/* Render an istance of the Result component, pass the score and the refererence to a function called playAgain */}\n                {this.state.responses === 5 ? (<Result score={this.state.score} playAgain={this.playAgain}/>) : null}\n            </div>\n        );\n    }\n}\n\n// Invoke render method from ReactDOM library\nReactDOM.render(\n    <QuizBee />, // Passing the QuizBee component as first argument\n    // Selector to an element in the HTML (inside public folder) file to render the component into.\n    // index.html contains a div with id=\"root\" and this is where QuizBee app will be mounted into.\n    document.getElementById(\"root\") \n)"],"sourceRoot":""}