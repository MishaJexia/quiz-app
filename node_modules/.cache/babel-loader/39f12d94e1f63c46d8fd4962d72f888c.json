{"ast":null,"code":"var _jsxFileName = \"/home/lorenzo/MEGAsync/Web Dev/react/quiz_bee/src/index.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from \"react-dom\";\nimport \"./assets/style.css\";\nimport quizService from \"./quizService\";\nimport QuestionBox from \"./components/QuestionBox\";\nimport Result from \"./components/Result\"; // Creating root component, the class QuizBee\n\nclass QuizBee extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      questionBank: [],\n      score: 0,\n      responses: 0\n    };\n\n    this.getQuestions = () => {\n      quizService().then(question => {\n        // Update the state variable\n        this.setState({\n          questionBank: question\n        });\n      });\n    };\n\n    this.computeAnswer = (answer, correctAnswer) => {\n      if (answer === correctAnswer) {\n        this.setState({\n          score: this.state.score + 1\n        });\n      }\n\n      this.setState({\n        responses: this.state.responses < 5 ? this.state.responses + 1 : 5\n      });\n    };\n\n    this.playAgain = () => {\n      this.getQuestions();\n      this.setState({\n        score: 0,\n        responses: 0\n      });\n    };\n  }\n\n  // Brings a set of questions from the API.\n  // This will populate the state variable with data\n  componentDidMount() {\n    this.getQuestions();\n  } // Creating render method that returns the JSX template that will render on the page\n\n\n  render() {\n    return (\n      /*#__PURE__*/\n      // className in JSX is like class in HTML\n      React.createElement(\"div\", {\n        className: \"container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }\n      }, \" QuizBee \"), this.state.questionBank.length > 0 && this.state.responses < 5 && this.state.questionBank.map(({\n        question,\n        answers,\n        correct,\n        questionId\n      }) =>\n      /*#__PURE__*/\n      // render instances of the QuestionBox component, passing two props: question and options\n      React.createElement(QuestionBox // question props dynamiccaly bound to question text, options props carry an array of answers to render\n      , {\n        question: question,\n        options: answers,\n        key: questionId // selected prop from QuestionBoc function run a function that gets user response and access the correct answer from API\n        ,\n        selected: answer => this.computeAnswer(answer, correct),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }\n      })), this.state.responses === 5 ? /*#__PURE__*/React.createElement(Result, {\n        score: this.state.score,\n        playAgain: this.playAgain,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 48\n        }\n      }) : null)\n    );\n  }\n\n} // Invoke render method from ReactDOM library\n\n\nReactDOM.render( /*#__PURE__*/React.createElement(QuizBee, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }\n}), // Passing the QuizBee component as first argument\n// Selector to an element in the HTML (inside public folder) file to render the component into.\n// index.html contains a div with id=\"root\" and this is where QuizBee app will be mounted into.\ndocument.getElementById(\"root\"));","map":{"version":3,"sources":["/home/lorenzo/MEGAsync/Web Dev/react/quiz_bee/src/index.js"],"names":["React","Component","ReactDOM","quizService","QuestionBox","Result","QuizBee","state","questionBank","score","responses","getQuestions","then","question","setState","computeAnswer","answer","correctAnswer","playAgain","componentDidMount","render","length","map","answers","correct","questionId","document","getElementById"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport ReactDOM from \"react-dom\";\nimport \"./assets/style.css\";\n\nimport quizService from \"./quizService\";\nimport QuestionBox from \"./components/QuestionBox\";\nimport Result from \"./components/Result\";\n\n// Creating root component, the class QuizBee\nclass QuizBee extends Component {\n    // Instantiate local state for the quizService component in the questionBank array\n    // This will store the questions once they are pulled in from the API\n    state = {\n        questionBank: [],\n        score: 0,\n        responses: 0\n    };\n\n    // This function invokes the quizService API\n    // and fill the questionBank array with the results\n    getQuestions = () => {\n        quizService().then(question => {\n            // Update the state variable\n            this.setState({\n                questionBank: question\n            });\n        });\n    };\n\n\n    computeAnswer = (answer, correctAnswer) => {\n        if(answer === correctAnswer){\n            this.setState({\n                score: this.state.score + 1\n            });\n        }\n        this.setState({\n            responses: this.state.responses < 5 ? this.state.responses + 1 : 5\n        })\n    };\n    playAgain = () => {\n        this.getQuestions();\n        this.setState({\n            score: 0,\n            responses: 0\n        });\n    };\n    // Brings a set of questions from the API.\n    // This will populate the state variable with data\n    componentDidMount(){\n        this.getQuestions();\n    }\n\n    // Creating render method that returns the JSX template that will render on the page\n    render(){\n        return (\n            // className in JSX is like class in HTML\n            <div className=\"container\">\n                <div className='title'> QuizBee </div>\n                {/* Check whether the questionBank array has data to render */}\n                {this.state.questionBank.length > 0 && \n                this.state.responses < 5 && \n                this.state.questionBank.map(\n                    ({question, answers, correct, questionId}) => ( // render instances of the QuestionBox component, passing two props: question and options\n                    <QuestionBox // question props dynamiccaly bound to question text, options props carry an array of answers to render\n                    question={question} \n                    options={answers} \n                    key={questionId}\n                    // selected prop from QuestionBoc function run a function that gets user response and access the correct answer from API\n                    selected={answer => this.computeAnswer(answer, correct)}\n                    />  \n                    )\n                )}\n                {/* Render an istance of the Result component, pass the score and the refererence to a function called playAgain */}\n                {this.state.responses === 5 ? (<Result score={this.state.score} playAgain={this.playAgain}/>) : null}\n            </div>\n        );\n    }\n}\n\n// Invoke render method from ReactDOM library\nReactDOM.render(\n    <QuizBee />, // Passing the QuizBee component as first argument\n    // Selector to an element in the HTML (inside public folder) file to render the component into.\n    // index.html contains a div with id=\"root\" and this is where QuizBee app will be mounted into.\n    document.getElementById(\"root\") \n)"]},"metadata":{},"sourceType":"module"}