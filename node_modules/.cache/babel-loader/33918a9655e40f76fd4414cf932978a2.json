{"ast":null,"code":"var _jsxFileName = \"/home/lorenzo/MEGAsync/Web Dev/react/quiz_bee/src/index.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from \"react-dom\";\nimport \"./assets/style.css\";\nimport quizService from \"./quizService\";\nimport QuestionBox from \"./components/QuestionBox\"; // Creating root component, the class QuizBee\n\nclass QuizBee extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      questionBank: [],\n      score: 0,\n      responses: 0\n    };\n\n    this.getQuestions = () => {\n      quizService().then(question => {\n        // Update the state variable\n        this.setState({\n          questionBank: question\n        });\n      });\n    };\n\n    this.computeAnswer = (answer, correctAnswer) => {\n      if (answer === correctAnswer) {\n        this.setState({\n          score: this.state.score + 1\n        });\n      }\n\n      this.setState({\n        responses: this.state.responses < 5 ? this.state.responses + 1 : 5\n      });\n    };\n  }\n\n  // Brings a set of questions from the API.\n  // This will populate the state variable with data\n  componentDidMount() {\n    this.getQuestions();\n  } // Creating render method that returns the JSX template that will render on the page\n\n\n  render() {\n    return (\n      /*#__PURE__*/\n      // className in JSX is like class in HTML\n      React.createElement(\"div\", {\n        className: \"container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }\n      }, \" QuizBee \"), this.state.questionBank.length > 0 && this.state.responses < 5 && this.state.questionBank.map(({\n        question,\n        answers,\n        correct,\n        questionId\n      }) =>\n      /*#__PURE__*/\n      // render instances of the QuestionBox component, passing two props: question and options\n      React.createElement(QuestionBox // question props dynamiccaly bound to question text, options props carry an array of answers to render\n      , {\n        question: question,\n        options: answers,\n        key: questionId // selected prop from QuestionBoc function run a function that gets user response and access the correct answer from API\n        ,\n        selected: answer => this.computeAnswer(answer, correct),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }\n      })))\n    );\n  }\n\n} // Invoke render method from ReactDOM library\n\n\nReactDOM.render( /*#__PURE__*/React.createElement(QuizBee, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }\n}), // Passing the QuizBee component as first argument\n// Selector to an element in the HTML (inside public folder) file to render the component into.\n// index.html contains a div with id=\"root\" and this is where QuizBee app will be mounted into.\ndocument.getElementById(\"root\"));","map":{"version":3,"sources":["/home/lorenzo/MEGAsync/Web Dev/react/quiz_bee/src/index.js"],"names":["React","Component","ReactDOM","quizService","QuestionBox","QuizBee","state","questionBank","score","responses","getQuestions","then","question","setState","computeAnswer","answer","correctAnswer","componentDidMount","render","length","map","answers","correct","questionId","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,oBAAP;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,0BAAxB,C,CAEA;;AACA,MAAMC,OAAN,SAAsBJ,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAG5BK,KAH4B,GAGpB;AACJC,MAAAA,YAAY,EAAE,EADV;AAEJC,MAAAA,KAAK,EAAE,CAFH;AAGJC,MAAAA,SAAS,EAAE;AAHP,KAHoB;;AAAA,SAW5BC,YAX4B,GAWb,MAAM;AACjBP,MAAAA,WAAW,GAAGQ,IAAd,CAAmBC,QAAQ,IAAI;AAC3B;AACA,aAAKC,QAAL,CAAc;AACVN,UAAAA,YAAY,EAAEK;AADJ,SAAd;AAGH,OALD;AAMH,KAlB2B;;AAAA,SAqB5BE,aArB4B,GAqBZ,CAACC,MAAD,EAASC,aAAT,KAA2B;AACvC,UAAGD,MAAM,KAAKC,aAAd,EAA4B;AACxB,aAAKH,QAAL,CAAc;AACVL,UAAAA,KAAK,EAAE,KAAKF,KAAL,CAAWE,KAAX,GAAmB;AADhB,SAAd;AAGH;;AACD,WAAKK,QAAL,CAAc;AACVJ,QAAAA,SAAS,EAAE,KAAKH,KAAL,CAAWG,SAAX,GAAuB,CAAvB,GAA2B,KAAKH,KAAL,CAAWG,SAAX,GAAuB,CAAlD,GAAsD;AADvD,OAAd;AAGH,KA9B2B;AAAA;;AA+B5B;AACA;AACAQ,EAAAA,iBAAiB,GAAE;AACf,SAAKP,YAAL;AACH,GAnC2B,CAqC5B;;;AACAQ,EAAAA,MAAM,GAAE;AACJ;AAAA;AACI;AACA;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,EAGK,KAAKZ,KAAL,CAAWC,YAAX,CAAwBY,MAAxB,GAAiC,CAAjC,IACD,KAAKb,KAAL,CAAWG,SAAX,GAAuB,CADtB,IAEC,KAAKH,KAAL,CAAWC,YAAX,CAAwBa,GAAxB,CACE,CAAC;AAACR,QAAAA,QAAD;AAAWS,QAAAA,OAAX;AAAoBC,QAAAA,OAApB;AAA6BC,QAAAA;AAA7B,OAAD;AAAA;AAAgD;AAChD,0BAAC,WAAD,CAAa;AAAb;AACA,QAAA,QAAQ,EAAEX,QADV;AAEA,QAAA,OAAO,EAAES,OAFT;AAGA,QAAA,GAAG,EAAEE,UAHL,CAIA;AAJA;AAKA,QAAA,QAAQ,EAAER,MAAM,IAAI,KAAKD,aAAL,CAAmBC,MAAnB,EAA2BO,OAA3B,CALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CALN;AAFJ;AAoBH;;AA3D2B,C,CA8DhC;;;AACApB,QAAQ,CAACgB,MAAT,eACI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,EACiB;AACb;AACA;AACAM,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJJ","sourcesContent":["import React, {Component} from 'react';\nimport ReactDOM from \"react-dom\";\nimport \"./assets/style.css\";\n\nimport quizService from \"./quizService\";\nimport QuestionBox from \"./components/QuestionBox\";\n\n// Creating root component, the class QuizBee\nclass QuizBee extends Component {\n    // Instantiate local state for the quizService component in the questionBank array\n    // This will store the questions once they are pulled in from the API\n    state = {\n        questionBank: [],\n        score: 0,\n        responses: 0\n    };\n\n    // This function invokes the quizService API\n    // and fill the questionBank array with the results\n    getQuestions = () => {\n        quizService().then(question => {\n            // Update the state variable\n            this.setState({\n                questionBank: question\n            });\n        });\n    };\n\n\n    computeAnswer = (answer, correctAnswer) => {\n        if(answer === correctAnswer){\n            this.setState({\n                score: this.state.score + 1\n            });\n        }\n        this.setState({\n            responses: this.state.responses < 5 ? this.state.responses + 1 : 5\n        })\n    };\n    // Brings a set of questions from the API.\n    // This will populate the state variable with data\n    componentDidMount(){\n        this.getQuestions();\n    }\n\n    // Creating render method that returns the JSX template that will render on the page\n    render(){\n        return (\n            // className in JSX is like class in HTML\n            <div className=\"container\">\n                <div className='title'> QuizBee </div>\n                {/* Check whether the questionBank array has data to render */}\n                {this.state.questionBank.length > 0 && \n                this.state.responses < 5 \n                &&this.state.questionBank.map(\n                    ({question, answers, correct, questionId}) => ( // render instances of the QuestionBox component, passing two props: question and options\n                    <QuestionBox // question props dynamiccaly bound to question text, options props carry an array of answers to render\n                    question={question} \n                    options={answers} \n                    key={questionId}\n                    // selected prop from QuestionBoc function run a function that gets user response and access the correct answer from API\n                    selected={answer => this.computeAnswer(answer, correct)}\n                    />  \n                    )\n                )}\n            </div>\n        );\n    }\n}\n\n// Invoke render method from ReactDOM library\nReactDOM.render(\n    <QuizBee />, // Passing the QuizBee component as first argument\n    // Selector to an element in the HTML (inside public folder) file to render the component into.\n    // index.html contains a div with id=\"root\" and this is where QuizBee app will be mounted into.\n    document.getElementById(\"root\") \n)"]},"metadata":{},"sourceType":"module"}